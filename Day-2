Time and space complexity
Matrix rotations
Nested looping
Primitive data types languages : c and java
pre-defined data types:
int
float
double
char
-PYTHON will n0t use primitive data types (directly use variables).
===========================================================================

Implement a 2D array and rotate the matrix 90 degress
a = [[1,2],
     [3,4]]
   
print(a[::-1])

===========================================================================

for(i=0;i<n;i++)
{
for(j=0;j<i;j++j)
{
Statements;
}
}

i  j
0 nothing
so when i 0....0 times
1....1 times
2....2 times
so 1+2+3+..+n=n(n+1)/2
             =O(n square)

===========================================================================
p=0
for(i=1;p<=n;i++)
{
p=p+i;
}
============================================================================
Create a dynamic one dimensional array between 10 to 30. Extract and print
1.EVEN NUMBERS
2. 2 POWER NUMBERS
Sol:
x = int(input("Enter lower range: "))
y = int(input("Enter upper range: "))
print("The even numbers are")
for i in range(x, y+1):
    if i % 2 == 0:
        print(i)
print("The 2 power values are")
for j in range(x, y+1):
    if (j&(j-1)) == 0 and j!=0:
        print(j)

================================================================================
TYPES OF TIME COMPLEXITY:
1. Constant Time complexity
2. Linear Time complexity
3. Logarithmic Time complexity
4. Quadratic time complexity
5. Exponential time complexity
=================================================================================
SPACE COMPLEXITY:

parallel concept to time complexity.
array of size n, require O(n) space.

two-dimensional array of size n*n:O(n^2)Space

Linear Search                    O(1)
Merge sort                       O(n)
Deapth First Search(DFS)         O(n)
Breadth First Search(BFS)        O(n)
Dynamic Programming              O(n^2) or O(n*2)

===================================================================================

CONSTANT COMPLEXITY=O(1)
same amount of space regardless of the input size n it is called constant complexity.
eg:sum ofarray elements, linear search 
*because space is not depending on values 
====================================================================================
SUM OF ARRAY ELEMENTS:

def array_summer(arr):
    total = 0
    for item in arr:
        total += item
    return total
print(array_summer([1, 2, 3, 3, 7]))
